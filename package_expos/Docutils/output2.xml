<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document ids="rst2html5-tools-restructuredtext-to-html5-bootstrap-css" names="rst2html5\ tools\ -\ restructuredtext\ to\ html5\ +\ bootstrap\ css" source="trial.rst" title="rst2html5 tools - RestructuredText to HTML5 + bootstrap css"><title>rst2html5 tools - RestructuredText to HTML5 + bootstrap css</title><paragraph>We all love rst and the ability to generate any format, but the rst2html tool generates really basic html and css.</paragraph><paragraph>This tool will generate newer, nicer, more readable markup and provide ways to modify the output with extensions like nice css
thanks to twitter's bootstrap css or online presentations with deck.js</paragraph><section ids="get-it" names="get\ it"><title>get it</title><paragraph>via pip:</paragraph><literal_block xml:space="preserve">pip install rst2html5-tools</literal_block><paragraph>locally:</paragraph><literal_block xml:space="preserve">git clone https://github.com/marianoguerra/rst2html5.git
cd rst2html5
git submodule init
git submodule update

sudo python setup.py install</literal_block></section><section ids="use-it" names="use\ it"><title>use it</title><paragraph>to generate a basic html document:</paragraph><literal_block xml:space="preserve">rst2html5 examples/slides.rst &gt; clean.html</literal_block><paragraph>to generate a set of slides using deck.js:</paragraph><literal_block xml:space="preserve">rst2html5 --deck-js --pretty-print-code --embed-content examples/slides.rst &gt; deck.html</literal_block><paragraph>to generate a set of slides using reveal.js:</paragraph><literal_block xml:space="preserve">rst2html5 --jquery --reveal-js --pretty-print-code examples/slides.rst &gt; reveal.html</literal_block><paragraph>to generate a set of slides using impress.js:</paragraph><literal_block xml:space="preserve">rst2html5 --stylesheet-path=html5css3/thirdparty/impressjs/css/impress-demo.css --impress-js examples/impress.rst &gt; output/impress.html</literal_block><paragraph>to generate a page using bootstrap:</paragraph><literal_block xml:space="preserve">rst2html5 --bootstrap-css --pretty-print-code --jquery --embed-content examples/slides.rst &gt; bootstrap.html</literal_block><paragraph>to higlight code with pygments:</paragraph><literal_block xml:space="preserve">rst2html5 --pygments examples/codeblock.rst &gt; code.html</literal_block><paragraph>note that you will have to add the stylesheet for the code to actually highlight, this just does the code parsing and html transformation.</paragraph><paragraph>to embed images inside the html file to have a single .html file to distribute
add the --embed-images option.</paragraph><paragraph>post processors support optional parameters, they are passed with a command
line option with the same name as the post processor appending "-opts" at the
end, for example to change the revealjs theme you can do:</paragraph><literal_block xml:space="preserve">rst2html5 --jquery --reveal-js --reveal-js-opts theme=serif examples/slides.rst &gt; reveal.html</literal_block><paragraph>you can also pass the base path to the theme css file:</paragraph><literal_block xml:space="preserve">rst2html5 --jquery --reveal-js --reveal-js-opts theme=serif,themepath=~/mytheme examples/slides.rst &gt; reveal.html</literal_block><paragraph>it will look at the theme at ~/mytheme/serif.css</paragraph><paragraph>options are passed as a comma separated list of key value pairs separated with
an equal sign, values are parsed as json, if parsing fails they are passed as
strings, for example here is an example of options:</paragraph><literal_block xml:space="preserve">--some-processor-opts theme=serif,count=4,verbose=true,foo=null</literal_block><paragraph>if a key is passed more than once that parameter is passed to the processor as a list of values, note that if only one value is passed it's passed as it is, the convenience function as_list is provided to handle this case if you want to always receive a list.</paragraph><paragraph>to add custom js files to the resulting file you can use the --add-js post processor like this:</paragraph><literal_block xml:space="preserve">rst2html5 slides.rst --add-js --add-js-opts path=foo.js,path=bar.js</literal_block><paragraph>that command will add foo.js and bar.js as scripts in the resulting html file.</paragraph><section ids="pretty-print-code-notes" names="pretty\ print\ code\ notes"><title>Pretty Print Code Notes</title><paragraph>enable it:</paragraph><literal_block xml:space="preserve">--pretty-print-code</literal_block><paragraph>add language specific lexers:</paragraph><literal_block xml:space="preserve">--pretty-print-code-opts langs=clj:erlang</literal_block><paragraph>Note: you have to pass both options when passing opts to prettify like this:</paragraph><literal_block xml:space="preserve">--pretty-print-code --pretty-print-code-opts langs=clj:erlang</literal_block><paragraph>that is, the name of the languages separated by colons, available lexers at the
moment of this writing are:</paragraph><bullet_list bullet="*"><list_item><paragraph>apollo</paragraph></list_item><list_item><paragraph>basic</paragraph></list_item><list_item><paragraph>clj</paragraph></list_item><list_item><paragraph>css</paragraph></list_item><list_item><paragraph>dart</paragraph></list_item><list_item><paragraph>erlang</paragraph></list_item><list_item><paragraph>go</paragraph></list_item><list_item><paragraph>hs</paragraph></list_item><list_item><paragraph>lisp</paragraph></list_item><list_item><paragraph>llvm</paragraph></list_item><list_item><paragraph>lua</paragraph></list_item><list_item><paragraph>matlab</paragraph></list_item><list_item><paragraph>ml</paragraph></list_item><list_item><paragraph>mumps</paragraph></list_item><list_item><paragraph>n</paragraph></list_item><list_item><paragraph>pascal</paragraph></list_item><list_item><paragraph>proto</paragraph></list_item><list_item><paragraph>rd</paragraph></list_item><list_item><paragraph>r</paragraph></list_item><list_item><paragraph>scala</paragraph></list_item><list_item><paragraph>sql</paragraph></list_item><list_item><paragraph>tcl</paragraph></list_item><list_item><paragraph>tex</paragraph></list_item><list_item><paragraph>vb</paragraph></list_item><list_item><paragraph>vhdl</paragraph></list_item><list_item><paragraph>wiki</paragraph></list_item><list_item><paragraph>xq</paragraph></list_item><list_item><paragraph>yaml</paragraph></list_item></bullet_list><paragraph>you can see the available lexers under html5css3/thirdparty/prettify/lang-*.js</paragraph></section><section ids="revealjs-notes" names="revealjs\ notes"><title>RevealJs Notes</title><paragraph>to print pass --reveal-js-opts printpdf=true, for example:</paragraph><literal_block xml:space="preserve">rst2html5 --jquery --reveal-js --reveal-js-opts printpdf=true examples/slides.rst &gt; reveal-print.html</literal_block><paragraph>this can be used to open with chrome or chromium and print as pdf as described here: <reference refuri="https://github.com/hakimel/reveal.js#pdf-export">https://github.com/hakimel/reveal.js#pdf-export</reference></paragraph></section></section><section ids="math-support" names="math\ support"><title>Math Support</title><paragraph>Use the <literal>math</literal> role and directive to include inline math and block-level equations into your document:</paragraph><literal_block xml:space="preserve">When :math`a \ne 0`, there are two solutions to :math:`ax^2 + bx + c = 0`
and they are

.. math::

   x = {-b \pm \sqrt{b^2-4ac} \over 2a}</literal_block><paragraph>Both of these support a basic subset of <reference name="LaTeX" refuri="https://www.latex-project.org">LaTeX</reference> syntax.</paragraph><paragraph>By default, <reference name="MathJax" refuri="https://www.mathjax.org">MathJax</reference> is used for displaying math. You can choose a different output format using the <literal>--math-output</literal> command line option:</paragraph><bullet_list bullet="*"><list_item><paragraph><literal>--math-output mathjax</literal> uses MathJax (the default)</paragraph></list_item><list_item><paragraph><literal>--math-output html</literal> will use plain HTML + CSS</paragraph></list_item><list_item><paragraph><literal>--math-output mathml</literal> will use <reference name="MathML" refuri="https://en.wikipedia.org/wiki/MathML">MathML</reference></paragraph></list_item><list_item><paragraph><literal>--math-output latex</literal> outputs raw LaTeX</paragraph></list_item></bullet_list><paragraph>If you use MathJax, you can use the <literal>--mathjax-url</literal> and <literal>-mathjax-config</literal> command line options to configure a custom MathJax JavaScript URL and to provide a file with a custom MathJax configuration, respectively.</paragraph><paragraph>If you use HTML + CSS output, you can use the <literal>--math-css</literal> command line option to configure a custom math stylesheet.</paragraph><paragraph>Note that the old MathJax postprocessor (activated using <literal>--mathjax</literal>) has been deprecated.</paragraph><target ids="latex" names="latex" refuri="https://www.latex-project.org"></target><target ids="mathjax" names="mathjax" refuri="https://www.mathjax.org"></target><target ids="mathml" names="mathml" refuri="https://en.wikipedia.org/wiki/MathML"></target></section><section ids="see-it" names="see\ it"><title>see it</title><paragraph>you can see the examples from the above commands here:</paragraph><bullet_list bullet="*"><list_item><paragraph><reference refuri="http://marianoguerra.github.com/rst2html5/output/clean.html">http://marianoguerra.github.com/rst2html5/output/clean.html</reference></paragraph></list_item><list_item><paragraph><reference refuri="http://marianoguerra.github.com/rst2html5/output/reveal.html">http://marianoguerra.github.com/rst2html5/output/reveal.html</reference></paragraph></list_item><list_item><paragraph><reference refuri="http://marianoguerra.github.com/rst2html5/output/deck.html">http://marianoguerra.github.com/rst2html5/output/deck.html</reference></paragraph></list_item><list_item><paragraph><reference refuri="http://marianoguerra.github.com/rst2html5/output/impress.html">http://marianoguerra.github.com/rst2html5/output/impress.html</reference></paragraph></list_item><list_item><paragraph><reference refuri="http://marianoguerra.github.com/rst2html5/output/bootstrap.html">http://marianoguerra.github.com/rst2html5/output/bootstrap.html</reference></paragraph></list_item></bullet_list><paragraph>example of video directive</paragraph><bullet_list bullet="*"><list_item><paragraph><reference refuri="http://marianoguerra.github.com/rst2html5/output/videos.html">http://marianoguerra.github.com/rst2html5/output/videos.html</reference></paragraph></list_item></bullet_list></section><section ids="test-it" names="test\ it"><title>test it</title><paragraph>We use <reference name="tox" refuri="https://tox.readthedocs.org">tox</reference><target ids="tox" names="tox" refuri="https://tox.readthedocs.org"></target> to run our test suite. After installing <emphasis>tox</emphasis> you can execute the tests by running <literal>tox</literal> in the project's root directory.</paragraph><paragraph>The test cases can be found in <literal>html5css3/tests.py</literal>.</paragraph></section><section ids="want-to-contribute" names="want\ to\ contribute\ ?"><title>want to contribute ?</title><paragraph>clone and send us a pull request!</paragraph><literal_block xml:space="preserve">git clone https://github.com/marianoguerra/rst2html5.git
cd rst2html5
git submodule update --init
python setup.py develop</literal_block></section><section ids="note-to-self-to-release" names="note\ to\ self\ to\ release"><title>note to self to release</title><bullet_list bullet="*"><list_item><paragraph>update version on setup.py</paragraph></list_item></bullet_list><literal_block xml:space="preserve">python setup.py sdist upload</literal_block></section></document>